#+TITLE:  Networking Support
#+AUTHOR: Howard Abrams
#+EMAIL:  howard.abrams@gmail.com
#+DATE:   2015 May 27
#+TAGS:   technical networking linux
#+PROPERTY: header-args :results output

This is part of my Library of Babel collection. Remember to hit the
=C-c C-v i= to add these sections.

* ifconfig

  The =ifconfig= program displays all the important information, just
  in the wrong format. Let’s fix that. First, let’s retrieve the
  results and we’ll store that in a name, =ifconfig_data=:

  #+NAME: ifconfig_data
  #+BEGIN_SRC sh :results drawer
    ifconfig -a
  #+END_SRC

  #+RESULTS: ifconfig_data
  :RESULTS:
  lo0: flags=8049<UP,LOOPBACK,RUNNING,MULTICAST> mtu 16384
          options=3<RXCSUM,TXCSUM>
          inet6 ::1 prefixlen 128
          inet 127.0.0.1 netmask 0xff000000
          inet6 fe80::1%lo0 prefixlen 64 scopeid 0x1
          nd6 options=1<PERFORMNUD>
  gif0: flags=8010<POINTOPOINT,MULTICAST> mtu 1280
  stf0: flags=0<> mtu 1280
  en0: flags=8863<UP,BROADCAST,SMART,RUNNING,SIMPLEX,MULTICAST> mtu 1500
          ether 6c:40:08:b7:ce:b8
          inet6 fe80::6e40:8ff:feb7:ceb8%en0 prefixlen 64 scopeid 0x4
          inet 192.168.77.40 netmask 0xfffffe00 broadcast 192.168.77.255
          nd6 options=1<PERFORMNUD>
          media: autoselect
          status: active
  en1: flags=8963<UP,BROADCAST,SMART,RUNNING,PROMISC,SIMPLEX,MULTICAST> mtu 1500
          options=60<TSO4,TSO6>
          ether 72:00:06:c1:34:00
          media: autoselect <full-duplex>
          status: inactive
  en2: flags=8963<UP,BROADCAST,SMART,RUNNING,PROMISC,SIMPLEX,MULTICAST> mtu 1500
          options=60<TSO4,TSO6>
          ether 72:00:06:c1:34:01
          media: autoselect <full-duplex>
          status: inactive
  bridge0: flags=8863<UP,BROADCAST,SMART,RUNNING,SIMPLEX,MULTICAST> mtu 1500
          options=63<RXCSUM,TXCSUM,TSO4,TSO6>
          ether 6e:40:08:7b:54:00
          Configuration:
                  id 0:0:0:0:0:0 priority 0 hellotime 0 fwddelay 0
                  maxage 0 holdcnt 0 proto stp maxaddr 100 timeout 1200
                  root id 0:0:0:0:0:0 priority 0 ifcost 0 port 0
                  ipfilter disabled flags 0x2
          member: en1 flags=3<LEARNING,DISCOVER>
                  ifmaxaddr 0 port 5 priority 0 path cost 0
          member: en2 flags=3<LEARNING,DISCOVER>
                  ifmaxaddr 0 port 6 priority 0 path cost 0
          nd6 options=1<PERFORMNUD>
          media: <unknown type>
          status: inactive
  p2p0: flags=8843<UP,BROADCAST,RUNNING,SIMPLEX,MULTICAST> mtu 2304
          ether 0e:40:08:b7:ce:b8
          media: autoselect
          status: inactive
  vboxnet0: flags=8842<BROADCAST,RUNNING,SIMPLEX,MULTICAST> mtu 1500
          ether 0a:00:27:00:00:00
  vboxnet1: flags=8842<BROADCAST,RUNNING,SIMPLEX,MULTICAST> mtu 1500
          ether 0a:00:27:00:00:01
  vboxnet2: flags=8843<UP,BROADCAST,RUNNING,SIMPLEX,MULTICAST> mtu 1500
          ether 0a:00:27:00:00:02
          inet 172.28.0.1 netmask 0xffffff00 broadcast 172.28.0.255
  vboxnet3: flags=8842<BROADCAST,RUNNING,SIMPLEX,MULTICAST> mtu 1500
          ether 0a:00:27:00:00:03
  vboxnet4: flags=8842<BROADCAST,RUNNING,SIMPLEX,MULTICAST> mtu 1500
          ether 0a:00:27:00:00:04
  vboxnet5: flags=8943<UP,BROADCAST,RUNNING,PROMISC,SIMPLEX,MULTICAST> mtu 1500
          ether 0a:00:27:00:00:05
          inet 192.168.59.3 netmask 0xffffff00 broadcast 192.168.59.255
  :END:

  However, the output format is awful, and I would like to have a list
  of tuples, where each tuple has the interface and the IP address.
  Since some interfaces may not have an IPv4 address (which is what
  I’m wanting).

  To address this, I have a recursive function that calls itself for
  each regular expression match:

  1. Matched the Interface
     2. The name of the Interface
  3. Matches the Address
     4. Optional =addr:= section that we don’t care about
     5. The value of the address

  If the match is on an address, we assume that we passed in the
  interface name as a =header= parameter, so that we can /build up/
  the result.

  #+NAME: ifconfig-display
  #+BEGIN_SRC elisp :var datastring=ifconfig_data :results value
    (defun split-ifconfig (datastr pos header)
      "Assumes that the DATASTR is a string datastrput from ifconfig.  The POS is position within the string to search.  The HEADER is the current interface address."
      (when (string-match "\\(^\\([^ :]+\\):?\\ \\)\\|\\( *inet \\(addr:\\)?\\([0-9.]+\\)\\)" datastr pos)
        (cond
         ;; Interface:: Recurse with the name of this new header
         ((match-string 1 datastr)
          (split-ifconfig datastr (match-end 0) (match-string 2 datastr)))

         ;; Address:: Return a list with our interface header, the
         ;;           address, and the results of parsing the rest
         ((match-string 3 datastr)
          (cons (list header (match-string 5 datastr))
                (split-ifconfig datastr (match-end 0) nil))))))

    (split-ifconfig datastring 0 nil)
  #+END_SRC

  #+RESULTS: ifconfig-display

  This works if I evaluate the function stuff directly with =C-x C-e=.

  The last line, however, in the code block returns =nil=. Always. The
  =datastring= contains the data. The function, =split-ifconfig= that
  was defined in the function is called. Still no go.

  This doesn’t work, even if I pre-load the function into the global
  function space, and call it from the block:

  #+BEGIN_SRC elisp :var out=ifconfig_data :results value
    (split-ifconfig out 0 nil)
  #+END_SRC

  #+RESULTS:

  I’ve tried making the =datastr= aspect a global variable, and not
  keep passing it. Still no go.

  Now we can have something to call:

  #+NAME: ifconfig
  #+BEGIN_SRC sh :post ifconfig-display(out=*this*) :results output
    ifconfig -a
  #+END_SRC

  #+RESULTS: ifconfig
  : nil

* Network Scan

  #+NAME: network-scan
  #+BEGIN_SRC sh :var cidr="10.0.1.0/24"
    nmap -sP $cidr | egrep -o '[0-9.]+[0-9]$'
  #+END_SRC

  #+RESULTS: network-scan
  #+begin_example
  10.0.1.1
  10.0.1.60
  10.0.1.157
  10.0.1.158
  10.0.1.161
  10.0.1.163
  10.0.1.178
  10.0.1.185
  10.0.1.190
  10.0.1.193
  10.0.1.197
#+end_example
